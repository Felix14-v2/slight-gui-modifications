plugins {
    id 'fabric-loom' version '0.4.13'
    id 'maven-publish'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

minecraft {
    accessWidener = file("src/main/resources/slight-gui-modifications.aw")
}

repositories {
    maven { url "https://jitpack.io" }
    maven { url "https://dl.bintray.com/shedaniel/shedaniel-mods" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modCompile "net.fabricmc:fabric-loader:${project.loader_version}"

    modCompile "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modCompile "com.github.Chocohead:Fabric-ASM:${project.fabric_asm_version}"
    modRuntime "me.shedaniel:SmoothScrollingEverywhere:2.4.1"
    modCompile "me.shedaniel:RoughlyEnoughItems:3.6.13"
    modCompile "io.github.prospector:modmenu:1.10.2+build.32"
    modApi "me.shedaniel.cloth:config-2:2.13.5"
    modApi "me.shedaniel.cloth:cloth-events:${project.cloth_events}"
    modApi "me.sargunvohra.mcmods:autoconfig1u:2.0.1"

    afterEvaluate {
        def listAdded = []
        def eachDep = { dep ->
            for (apiIncludeDepStr in (api_include as String).split(',')) {
                def apiIncludeGroup = apiIncludeDepStr.split(':')[0]
                def apiIncludeDep = apiIncludeDepStr.split(':')[1]
                if (dep.module.id.group == apiIncludeGroup && dep.module.id.name.startsWith(apiIncludeDep)) {
                    def version = dep.module.id.version.indexOf('@') >= 0 ? dep.module.id.version.substring(0, dep.module.id.version.indexOf('@')) : dep.module.id.version
                    def mavenDep = "${dep.module.id.group}:${dep.module.id.name}:$version"
                    if (!(mavenDep in listAdded)) {
                        include(mavenDep) {
                            transitive = false
                        }
                        listAdded.add(mavenDep)
                    }
                    break
                }
            }
        }
        configurations.compile.resolvedConfiguration.firstLevelModuleDependencies.each eachDep
        configurations.runtimeClasspath.resolvedConfiguration.firstLevelModuleDependencies.each eachDep
    }
}

processResources {
    inputs.property "version", project.version

    from(sourceSets.main.resources.srcDirs) {
        include "fabric.mod.json"
        expand "version": project.version
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude "fabric.mod.json"
    }
}

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
}

// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
// if it is present.
// If you remove this task, sources will not be generated.
task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = "sources"
    from sourceSets.main.allSource
}

jar {
    from "LICENSE"
}

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            // add all the jars that should be included when publishing to maven
            artifact(remapJar) {
                builtBy remapJar
            }
            artifact(sourcesJar) {
                builtBy remapSourcesJar
            }
        }
    }

    // select the repositories you want to publish to
    repositories {
        // uncomment to publish to the local maven
        // mavenLocal()
    }
}